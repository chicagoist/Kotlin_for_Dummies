package stepik.basic_syntax

/* 2.8 –£—Å–ª–æ–≤–Ω—ã–∏ÃÜ –æ–ø–µ—Ä–∞—Ç–æ—Ä. –ß–∞—Å—Ç—å 2. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ



–î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –Ω–∞–ª–æ–≥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –ª–µ–≥–∫–æ–≤–æ–≥–æ —Ç–∞–∫ –∏ –≥—Ä—É–∑–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:

    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ true –∏–ª–∏ false - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤—ã–º. –ó–Ω–∞—á–µ–Ω–∏–µ true - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≥—Ä—É–∑–æ–≤–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ false - –ª–µ–≥–∫–æ–≤–æ–º—É.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)
    –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–ª–æ–≥, —É–º–Ω–æ–∂–∞—è –∫–æ–ª-–≤–æ –ª.—Å. –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–≤–∫—É. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ - —Å—Ç–∞–≤–∫–∞ –¥–ª—è –≥—Ä—É–∑–æ–≤—ã—Ö –∏ –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Ä–∞–∑–Ω–∞—è.
    –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å:

    –í–∏–¥ –¢–°: _ –∞–≤—Ç–æ–º–æ–±–∏–ª—å

    –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: _ –ª.—Å.

    –ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: _ —Ä—É–±./–ª.—Å.

    –°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞: _ —Ä—É–±.

–î–µ–π—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞–≤–∫–∏:

–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:

    <=100–ª.—Å. - 10 —Ä—É–±. / –ª.—Å
    >100–ª.—Å. - 34 —Ä—É–±. / –ª.—Å
    >150–ª.—Å. - 49 —Ä—É–±. / –ª.—Å
    >200–ª.—Å. - 75 —Ä—É–±. / –ª.—Å
    >250–ª.—Å. - 150 —Ä—É–±. / –ª.—Å

–ì—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:

    <=100–ª.—Å. - 25 —Ä—É–±. / –ª.—Å
    >100–ª.—Å. - 40 —Ä—É–±. / –ª.—Å
    >150–ª.—Å. - 50 —Ä—É–±. / –ª.—Å
    >200–ª.—Å. - 65 —Ä—É–±. / –ª.—Å
    >250–ª.—Å. - 85 —Ä—É–±. / –ª.—Å

Sample Input 1:

true
280

Sample Output 1:

–í–∏–¥ –¢–°: –≥—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: 280 –ª.—Å.
–ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: 85 —Ä—É–±./–ª.—Å.
–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞: 23800 —Ä—É–±.

Sample Input 2:

false
250

Sample Output 2:

–í–∏–¥ –¢–°: –ª–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: 250 –ª.—Å.
–ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: 75 —Ä—É–±./–ª.—Å.
–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞: 18750 —Ä—É–±.






*/

fun main() {
    var taxRate: Int = 0
    var typeOfAuto: String
    var isAutoCargo: Boolean? = null
    print("–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –í–∞—à–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤—ã–º? false/true: ")

    try {
        isAutoCargo = readln().toBooleanStrict()
    } catch (e: IllegalArgumentException) {
        println("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ 'true' –∏–ª–∏ 'false'")
        return
    }

    print("–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–≤ –ª.—Å.): ")
    val enginePower = readln().toIntOrNull() ?: run {
        println("–û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è —á–∏—Å–ª–æ!")
        return
    }

    if (!isAutoCargo) {
        typeOfAuto = "–ª–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
        taxRate = if (enginePower <= 100) {
            10
        } else if (enginePower <= 150) { // –£–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å enginePower > 100
            34
        } else if (enginePower <= 200) { // –£–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å enginePower > 150
            49
        } else if (enginePower <= 250) { // –£–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å enginePower > 200
            75
        } else { // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ (enginePower > 250)
            150
        }
    } else {
        typeOfAuto = "–≥—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
        taxRate = if (enginePower <= 100) {
            25
        } else if (enginePower <= 150) { // –£–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å enginePower > 100
            40
        } else if (enginePower <= 200) { // –£–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å enginePower > 150
            50
        } else if (enginePower <= 250) { // –£–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å enginePower > 200
            65
        } else { // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ (enginePower > 250)
            85
        }
    }

    val amountOfTax = enginePower * taxRate

    println("–í–∏–¥ –¢–°: $typeOfAuto")
    println("–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: $enginePower –ª.—Å.")
    println("–ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: $taxRate —Ä—É–±./–ª.—Å.")
    println("–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞: ${amountOfTax} —Ä—É–±.")
}


//fun main() {
//    print("The weather is good today? false/true: ")
//    val isGoodWeather = readln().toBoolean()
//    print("What time is it now?: ")
//    val timeNow = readln().toInt()
//    val isDay = timeNow < 22 && timeNow > 5
//    val isNight = timeNow >= 22 || timeNow <= 5
//    if (isDay && isGoodWeather) {
//        println("Go for walk!")
//    } else if (isDay && !isGoodWeather) {
//        println("Go to read book.")
//
//    } else {
//        println("Go to sleep!")
//    }
//
//
//}


//fun main() {
//    print("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–Ω–µ–≥ –≤ –∫–∞—Ä–º–∞–Ω–µ: ")
//    val haveMoney = readln().toIntOrNull() ?: 0
//    print("–û—Ç–≤–µ—Ç—å—Ç–µ - –≥–æ–ª–æ–¥–Ω—ã –ª–∏ –í—ã? true/false: ")
//    val haveHunger = readln().toBoolean()
//
//    if (haveHunger && haveMoney > 500) {
//        println("–ö–ø–∏—Ç–µ –ø–∏—Ü—Ü—É")
//    } else if (haveHunger && haveMoney < 500) {
//        println("–ö—É–ø–∏—Ç–µ –¥–æ—à–∏—Ä–∞–∫")
//    } else if (!haveHunger && haveMoney > 500) {
//        println("–°—Ö–æ–¥–∏—Ç–µ –≤ –∫–∏–Ω–æ")
//    } else {
//        println("–°—Ö–æ–¥–∏—Ç–µ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É")
//    }
//}

/*
üìë Cheat Sheet –ø–æ —É—Ä–æ–∫—É 2.8

–®–ü–ê–†–ì–ê–õ–ö–ê:

–û–±–∑–æ—Ä –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–£—Ä–æ–∫ 2.8: –£—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä. –ß–∞—Å—Ç—å 2. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–ª –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π (&&, ||) –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ if-else if-else –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏. –¢–∞–∫–∂–µ —Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª toBoolean() / toBooleanStrict() –∏ toIntOrNull() –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞, —á—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è Secure-first –ø–æ–¥—Ö–æ–¥–∞.
–ê–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–¥–∞ (–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ)
–¢–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –Ω–∞–ª–æ–≥–∞ –≤ —Ü–µ–ª–æ–º –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã.
–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:
Secure-first –∏ Null-safety: –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å toIntOrNull() –∏ try-catch –¥–ª—è toBooleanStrict(). –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞–¥–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ if-else if-else: –¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏ —Ç–∏–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
–ß–µ—Ç–∫–∏–π –≤—ã–≤–æ–¥: –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–∏—é.
val –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ taxRate –∏ typeOfAuto –æ–±—ä—è–≤–ª–µ–Ω—ã –∫–∞–∫ var, –Ω–æ –≤ —Ç–≤–æ–µ–º –∫–æ–¥–µ –æ–Ω–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∑–∞—Ç–µ–º –Ω–µ –º–µ–Ω—è—é—Ç—Å—è. –≠—Ç–æ —Ö–æ—Ä–æ—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è val.
–ú–æ–º–µ–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è (–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ Modern Kotlin, Null-safety, Secure-first):
isAutoCargo: Boolean? = null: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Boolean? (nullable Boolean) –∑–¥–µ—Å—å –Ω–µ —Å–æ–≤—Å–µ–º –∏–¥–∏–æ–º–∞—Ç–∏—á–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Ç—ã —Å—Ä–∞–∑—É –∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –æ—à–∏–±–∫—É –≤–≤–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∏—à—å –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –µ—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ï—Å–ª–∏ –≤–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, isAutoCargo –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç true –∏–ª–∏ false. –ú–æ–∂–Ω–æ –∏–∑–±–µ–∂–∞—Ç—å nullable —Ç–∏–ø–∞.
try-catch –¥–ª—è toBooleanStrict(): –•–æ—Ç—è try-catch —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤ Kotlin –µ—Å—Ç—å –±–æ–ª–µ–µ –∏–¥–∏–æ–º–∞—Ç–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞ –¥–ª—è –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –±—ã—Ç—å Secure-first –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å nullable. toBooleanStrictOrNull() –±—ã–ª –±—ã –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–º.
taxRate –∏ typeOfAuto –∫–∞–∫ var: –ö–∞–∫ —É–ø–æ–º—è–Ω—É—Ç–æ –≤—ã—à–µ, —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –æ–±—ä—è–≤–∏—Ç—å –∫–∞–∫ val, –∏—Å–ø–æ–ª—å–∑—É—è if –∫–∞–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É –ò–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: val –≤–º–µ—Å—Ç–æ var.
–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –ª–æ–≥–∏–∫–∞ if-else if-else: –•–æ—Ç—è –æ–Ω–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞, –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –¥–ª—è –ª–µ–≥–∫–æ–≤—ã—Ö –∏ –≥—Ä—É–∑–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –≠—Ç–æ –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ –∫—É—Ä—Å–∞ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ.
–ú–∏–Ω–∏-—à–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ —É—Ä–æ–∫—É 2.8
–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π:
&& (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ò): –æ–±–∞ —É—Å–ª–æ–≤–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å true.
|| (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ò–õ–ò): —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true.
! (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ù–ï): –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ.
if –∫–∞–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: –í Kotlin if –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç if-else –±–ª–æ–∫—É –≤ val. –≠—Ç–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ò–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
code
Kotlin
val result = if (condition) {
    "Value if true"
} else {
    "Value if false"
}
Null-safety –∏ Secure-first:
–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π toIntOrNull(), readlnOrNull(), toBooleanStrictOrNull() –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.
–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π null –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é ?: return –∏–ª–∏ if (value == null) return).
–ò–∑–±–µ–≥–∞–π !! (–æ–ø–µ—Ä–∞—Ç–æ—Ä "not-null assertion"), –µ—Å–ª–∏ –Ω–µ—Ç 100% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ null.

*/