package stepik.basic_syntax

/* 2.5

–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —á—Ç–æ–±—ã –æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–ª–∞—Å—å –∏ –≤—ã–≤–æ–¥–∏–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö —á–∏—Å–µ–ª

Sample Input:

8
11
Sample Output:

88

main () {
    val first : Int = readln()
    val second : Int = readln()
    val result = First * Second
    println("result")
}

*/

fun main() {
    val first: Int = readln().toIntOrNull() ?: 0
    val second: Int = readln().toIntOrNull() ?: 0
    val result = first * second
    println(result)
}

/*
fun main() {

    var firstPersonAge: Int = 0
    var secondPersonAge: Int = 0

    print("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞: ")
    firstPersonAge = readln().toInt()

    print("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞: ")
    secondPersonAge = readln().toInt()

    println("–ü–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫ —Å—Ç–∞—Ä—à–µ –≤—Ç–æ—Ä–æ–≥–æ –Ω–∞ ${firstPersonAge - secondPersonAge} –ª–µ—Ç")

}
*/

/*
üìë Cheat Sheet –ø–æ —É—Ä–æ–∫—É 2.5

val number: Int = "42".toInt() // –ë–∞–∑–æ–≤—ã–π —Å–ø–æ—Å–æ–±, –∫–∏–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

// –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π null
val input: String = readln()
val number: Int? = input.toIntOrNull() // –í–µ—Ä–Ω–µ—Ç —á–∏—Å–ª–æ (Int) –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ

if (number != null) {
    println("–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ: $number")
} else {
    println("–û—à–∏–±–∫–∞: '$input' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
}

// –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å Elvis-–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º (?:) –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
val validNumber: Int = input.toIntOrNull() ?: 0 // –ï—Å–ª–∏ null, —Ç–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è 0
println("–†–µ–∑—É–ª—å—Ç–∞—Ç: ${validNumber * 2}")

Int? –æ–∑–Ω–∞—á–∞–µ—Ç "Nullable Int", —Ç–æ –µ—Å—Ç—å "—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–æ null".

Int ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 42, 0, -15). –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null.

Int? ‚Äî –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–æ (42, 0, -15) –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ null (–æ–±–æ–∑–Ω–∞—á–∞—é—â–µ–µ "–Ω–∏—á–µ–≥–æ", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è").

 –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (—Å –ø—Ä–∏–º–µ—Ä–∞–º–∏)
–í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ:


val input: String = readln() // –ú—ã —á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
val number: Int? = input.toIntOrNull() // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:

–ú–µ—Ç–æ–¥ toIntOrNull() –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É "123" –≤ —á–∏—Å–ª–æ 123.

–ï—Å–ª–∏ —ç—Ç–æ —É–¥–∞—ë—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª "88"), —Ç–æ number –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ 88.

–ï—Å–ª–∏ —ç—Ç–æ –ù–ï —É–¥–∞—ë—Ç—Å—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª "hello" –∏–ª–∏ –æ—Å—Ç–∞–≤–∏–ª –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É), –º–µ—Ç–æ–¥ –Ω–µ "–ª–æ–º–∞–µ—Ç" –ø—Ä–æ–≥—Ä–∞–º–º—É (–Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ), –∞ –≤–µ–∂–ª–∏–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ null.

–¢–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π number ‚Äî Int?, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É: "–í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–∞ null. –†–∞–±–æ—Ç–∞—è —Å –Ω–µ–π, –Ω—É–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º."

–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ? –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å null
Kotlin —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã —Ç—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª null —Ç–∞–º, –≥–¥–µ –µ–≥–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ. –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —É–∂–∞—Å–Ω—É—é –æ—à–∏–±–∫—É NullPointerException (NPE), –∫–æ—Ç–æ—Ä–∞—è —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ Java.

–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä Kotlin –ù–ï –¥–∞—Å—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫:

val number: Int? = null
val result = number * 2 // –û–®–ò–ë–ö–ê –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò!
// –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä: "–°—Ç–æ–ø! number –º–æ–∂–µ—Ç –±—ã—Ç—å null, —ç—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ!"

‚úÖ –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å Int? (Nullable-—Ç–∏–ø–∞–º–∏)
–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–∏–æ–º–∞—Ç–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–±–æ–π—Ç–∏ –∑–∞—â–∏—Ç—É –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞:

1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null (if)
–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ null –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏ –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º.

val number: Int? = readln().toIntOrNull()

if (number != null) {
    // –í —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –£–ñ–ï –∑–Ω–∞–µ—Ç, —á—Ç–æ number - —ç—Ç–æ —Ç–æ—á–Ω–æ Int (–Ω–µ null)
    val result = number * 2
    println(result)
} else {
    println("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!")
}

2. Elvis-–æ–ø–µ—Ä–∞—Ç–æ—Ä (?:)
–≠—Ç–æ —Å–ø–æ—Å–æ–± —Å–∫–∞–∑–∞—Ç—å: "–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ null, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –≤–æ—Ç —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é".

val number: Int? = readln().toIntOrNull()
val validNumber: Int = number ?: 0 // –ï—Å–ª–∏ number null, —Ç–æ validNumber = 0
val result = validNumber * 2 // –í—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–º–Ω–æ–∂–∏—Ç—å, —Ç.–∫. validNumber —Ç–æ—á–Ω–æ Int

–ò–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± —Ç—ã –≤–∏–¥–µ–ª –≤ –∫–æ–¥–µ –¥–ª—è Laundry App:
val washTime = washTimeString.toIntOrNull() ?: 30
–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π: "–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ. –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å null (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å), —Ç–æ –ø—Ä–∏—Å–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π washTime —á–∏—Å–ª–æ 30."

3. –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ (?.)
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ —É –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å null.

val number: Int? = readln().toIntOrNull()
val doubleNumber: Int? = number?.times(2) // –ï—Å–ª–∏ number –Ω–µ null, —Ç–æ —É–º–Ω–æ–∂–∏—Ç –Ω–∞ 2.
// –ï—Å–ª–∏ number null, —Ç–æ –∏ doubleNumber –±—É–¥–µ—Ç null.
println(doubleNumber ?: "–ù–µ–ª—å–∑—è —É–¥–≤–æ–∏—Ç—å '–Ω–∏—á–µ–≥–æ'")

// 1. –ë–∞–∑–æ–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–û–ü–ê–°–ù–û–ï - –∫–∏–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
val num1: Int = "123".toInt()

// 2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–ü–†–ê–í–ò–õ–¨–ù–´–ô –°–ü–û–°–û–ë)
val num2: Int? = "123".toIntOrNull() // Int? = 123
val num3: Int? = "hello".toIntOrNull() // Int? = null

// 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è

// –°–ø–æ—Å–æ–± A: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ if
if (num2 != null) {
    val result = num2 * 2 // –ó–¥–µ—Å—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –∑–Ω–∞–µ—Ç, —á—Ç–æ num2 - —ç—Ç–æ Int
}

// –°–ø–æ—Å–æ–± B: Elvis-–æ–ø–µ—Ä–∞—Ç–æ—Ä (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
val validNumber: Int = num3 ?: 0 // –ï—Å–ª–∏ num3 null, —Ç–æ –≤–µ—Ä–Ω—ë—Ç—Å—è 0
println(validNumber * 2) // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è

// –°–ø–æ—Å–æ–± C: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ (?.)
val length: Int? = num3?.toString()?.length // –ï—Å–ª–∏ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –±—É–¥–µ—Ç null, —Ä–µ–∑—É–ª—å—Ç–∞—Ç - null

–ò—Ç–æ–≥:
Int? ‚Äî —ç—Ç–æ —Ç–∏–ø "Int –∏–ª–∏ null".

?. ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ ("—Å–¥–µ–ª–∞–π —ç—Ç–æ, –µ—Å–ª–∏ –Ω–µ null").

?: ‚Äî Elvis-–æ–ø–µ—Ä–∞—Ç–æ—Ä ("–µ—Å–ª–∏ null, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ").

–í—Å—è —ç—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω—É–ª—å-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî –≥–ª–∞–≤–Ω–∞—è —Ñ–∏—à–∫–∞ Kotlin, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –∫–æ–¥ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–º –æ—Ç —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫.

–¢—ã –±—É–¥–µ—à—å —á–∞—Å—Ç–æ –≤–∏–¥–µ—Ç—å —ç—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –æ–Ω–∏ ‚Äî –æ—Å–Ω–æ–≤–∞ –∏–¥–∏–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ Kotlin. –ü–æ–∑–∂–µ, –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –∫—É—Ä—Å–∞, —ç—Ç–∞ —Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω–æ.


*/